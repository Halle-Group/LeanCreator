

// This file was automatically generated by Coco/R; don't modify it.
#include "Parser.h"
#include "busyLexer.h"


namespace busy {


static QString coco_string_create( const wchar_t* str )
{
    return QString::fromStdWString(str);
}

int Parser::peek( quint8 la )
{
	if( la == 0 )
		return d_cur.d_type;
	else if( la == 1 )
		return d_next.d_type;
	else
		return scanner->peekToken( la - 1 ).d_type;
}

void Parser::RunParser()
{
    d_stack.push(&d_root);
    Parse();
    d_stack.pop();
}
    
void Parser::SynErr(int n, const char* ctx) {
    if (errDist >= minErrDist)
    {
       SynErr(d_next.d_sourcePath,d_next.d_lineNr, d_next.d_colNr, n, ctx);
    }
	errDist = 0;
}

void Parser::SemErr(const char* msg) {
	if (errDist >= minErrDist)
		error(d_cur.d_sourcePath,d_cur.d_lineNr, d_cur.d_colNr, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		d_cur = d_next;
		d_next = scanner->nextToken();
        if( d_next.d_type == busy::Tok_Eof )
            d_next.d_type = _EOF;

        la->kind = d_next.d_type;
        if (la->kind <= maxT)
        {
            ++errDist;
            break;
        }

		d_next = d_cur;
	}
}

void Parser::Expect(int n, const char* ctx ) {
	if (la->kind==n) Get(); else { SynErr(n, ctx); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::Busy() {
		d_stack.push(&d_root); 
		while (StartOf(1)) {
			if (la->kind == _T_subdir || la->kind == _T_submod || la->kind == _T_submodule) {
				Submodule();
			} else if (StartOf(2)) {
				declaration();
			} else if (StartOf(3)) {
				statement();
			} else {
				macrodef();
			}
			if (la->kind == _T_Semi) {
				Get();
				addTerminal(); 
			}
		}
		d_stack.pop(); 
}

void Parser::Submodule() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_Submodule, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_submodule) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_submod) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_subdir) {
			Get();
			addTerminal(); 
		} else SynErr(72,__FUNCTION__);
		identdef();
		if (la->kind == _T_ColonEq || la->kind == _T_Eq) {
			if (la->kind == _T_Eq) {
				Get();
				addTerminal(); 
			} else {
				Get();
				addTerminal(); 
			}
			if (la->kind == _T_path) {
				Get();
				addTerminal(); 
			} else if (la->kind == _T_ident) {
				Get();
				addTerminal(); 
			} else SynErr(73,__FUNCTION__);
		}
		if (la->kind == _T_else) {
			Get();
			addTerminal(); 
			Expect(_T_path,__FUNCTION__);
			addTerminal(); 
		}
		if (la->kind == _T_Lpar) {
			Get();
			addTerminal(); 
			paramList();
			Expect(_T_Rpar,__FUNCTION__);
			addTerminal(); 
		}
		d_stack.pop(); 
}

void Parser::declaration() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_declaration, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_let || la->kind == _T_param || la->kind == _T_var) {
			vardecl();
		} else if (la->kind == _T_type) {
			typedecl();
		} else SynErr(74,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::statement() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_statement, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_if) {
			condition();
		} else if (la->kind == _T_Dot || la->kind == _T_Hat || la->kind == _T_ident) {
			assigOrCall();
		} else SynErr(75,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::macrodef() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_macrodef, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_define,__FUNCTION__);
		addTerminal(); 
		identdef();
		if (la->kind == _T_Lpar) {
			Get();
			addTerminal(); 
			if (la->kind == _T_ident) {
				Get();
				addTerminal(); 
				while (la->kind == _T_Comma || la->kind == _T_ident) {
					if (la->kind == _T_Comma) {
						Get();
						addTerminal(); 
					}
					Expect(_T_ident,__FUNCTION__);
					addTerminal(); 
				}
			}
			Expect(_T_Rpar,__FUNCTION__);
			addTerminal(); 
		}
		body();
		d_stack.pop(); 
}

void Parser::typeref() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_typeref, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		designator();
		if (la->kind == _T_LbrackRbrack) {
			Get();
			addTerminal(); 
		}
		d_stack.pop(); 
}

void Parser::designator() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_designator, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_Dot || la->kind == _T_Hat) {
			if (la->kind == _T_Hat) {
				Get();
				addTerminal(); 
			} else {
				Get();
				addTerminal(); 
			}
		}
		Expect(_T_ident,__FUNCTION__);
		addTerminal(); 
		while (peek(1) == _T_Dot && peek(2) == _T_ident ) {
			Expect(_T_Dot,__FUNCTION__);
			addTerminal(); 
			Expect(_T_ident,__FUNCTION__);
			addTerminal(); 
		}
		d_stack.pop(); 
}

void Parser::identdef() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_identdef, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_ident,__FUNCTION__);
		addTerminal(); 
		if (la->kind == _T_Bang || la->kind == _T_Star || la->kind == _T_Minus) {
			if (la->kind == _T_Star) {
				Get();
				addTerminal(); 
			} else if (la->kind == _T_Minus) {
				Get();
				addTerminal(); 
			} else {
				Get();
				addTerminal(); 
			}
		}
		d_stack.pop(); 
}

void Parser::paramList() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_paramList, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		paramValue();
		while (la->kind == _T_Comma || la->kind == _T_ident) {
			if (la->kind == _T_Comma) {
				Get();
				addTerminal(); 
			}
			paramValue();
		}
		d_stack.pop(); 
}

void Parser::paramValue() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_paramValue, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_ident,__FUNCTION__);
		addTerminal(); 
		if (la->kind == _T_ColonEq || la->kind == _T_Eq) {
			if (la->kind == _T_Eq) {
				Get();
				addTerminal(); 
			} else {
				Get();
				addTerminal(); 
			}
			expression();
		}
		d_stack.pop(); 
}

void Parser::expression() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_expression, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		SimpleExpression();
		if (StartOf(4)) {
			relation();
			SimpleExpression();
		}
		d_stack.pop(); 
}

void Parser::vardecl() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_vardecl, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_var) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_let) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_param) {
			Get();
			addTerminal(); 
		} else SynErr(76,__FUNCTION__);
		identdef();
		if (la->kind == _T_Colon) {
			Get();
			addTerminal(); 
			typeref();
		}
		initializer();
		d_stack.pop(); 
}

void Parser::typedecl() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_typedecl, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_type,__FUNCTION__);
		addTerminal(); 
		identdef();
		Expect(_T_Eq,__FUNCTION__);
		addTerminal(); 
		if (la->kind == _T_Lpar) {
			enumdecl();
		} else if (la->kind == _T_class) {
			classdecl();
		} else SynErr(77,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::body() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_body, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_Lbrace,__FUNCTION__);
		addTerminal(); 
		while (StartOf(5)) {
			if (la->kind == _T_subdir || la->kind == _T_submod || la->kind == _T_submodule) {
				Submodule();
			} else if (StartOf(2)) {
				declaration();
			} else {
				statement();
			}
			if (la->kind == _T_Semi) {
				Get();
				addTerminal(); 
			}
		}
		Expect(_T_Rbrace,__FUNCTION__);
		addTerminal(); 
		d_stack.pop(); 
}

void Parser::initializer() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_initializer, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_Lbrace || la->kind == _T_begin) {
			constructor();
		} else if (la->kind == _T_ColonEq || la->kind == _T_Eq) {
			if (la->kind == _T_Eq) {
				Get();
				addTerminal(); 
			} else {
				Get();
				addTerminal(); 
			}
			expression();
		} else SynErr(78,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::enumdecl() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_enumdecl, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_Lpar,__FUNCTION__);
		addTerminal(); 
		Expect(_T_symbol,__FUNCTION__);
		addTerminal(); 
		while (la->kind == _T_Comma) {
			Get();
			addTerminal(); 
			Expect(_T_symbol,__FUNCTION__);
			addTerminal(); 
		}
		Expect(_T_Rpar,__FUNCTION__);
		addTerminal(); 
		d_stack.pop(); 
}

void Parser::classdecl() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_classdecl, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_class,__FUNCTION__);
		addTerminal(); 
		if (la->kind == _T_Lpar) {
			Get();
			addTerminal(); 
			designator();
			Expect(_T_Rpar,__FUNCTION__);
			addTerminal(); 
		}
		if (la->kind == _T_Lbrace) {
			Get();
			addTerminal(); 
			while (la->kind == _T_ident) {
				fielddecl();
				if (la->kind == _T_Semi) {
					Get();
					addTerminal(); 
				}
			}
			Expect(_T_Rbrace,__FUNCTION__);
			addTerminal(); 
		} else if (la->kind == _T_end || la->kind == _T_ident) {
			while (la->kind == _T_ident) {
				fielddecl();
				if (la->kind == _T_Semi) {
					Get();
					addTerminal(); 
				}
			}
			Expect(_T_end,__FUNCTION__);
			addTerminal(); 
		} else SynErr(79,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::fielddecl() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_fielddecl, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_ident,__FUNCTION__);
		addTerminal(); 
		Expect(_T_Colon,__FUNCTION__);
		addTerminal(); 
		typeref();
		d_stack.pop(); 
}

void Parser::ExpList() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_ExpList, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		expression();
		while (StartOf(6)) {
			if (la->kind == _T_Comma) {
				Get();
				addTerminal(); 
			}
			expression();
		}
		d_stack.pop(); 
}

void Parser::SimpleExpression() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_SimpleExpression, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		term();
		while (la->kind == _T_Plus || la->kind == _T_Minus || la->kind == _T_2Bar) {
			AddOperator();
			term();
		}
		d_stack.pop(); 
}

void Parser::relation() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_relation, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		switch (la->kind) {
		case _T_2Eq: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_BangEq: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_Lt: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_Leq: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_Gt: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_Geq: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_in: {
			Get();
			addTerminal(); 
			break;
		}
		default: SynErr(80,__FUNCTION__); break;
		}
		d_stack.pop(); 
}

void Parser::term() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_term, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		factor();
		while (StartOf(7)) {
			MulOperator();
			factor();
		}
		d_stack.pop(); 
}

void Parser::AddOperator() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_AddOperator, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_Plus) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_Minus) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_2Bar) {
			Get();
			addTerminal(); 
		} else SynErr(81,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::factor() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_factor, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		switch (la->kind) {
		case _T_integer: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_real: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_string: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_symbol: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_path: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_true: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_false: {
			Get();
			addTerminal(); 
			break;
		}
		case _T_Dot: case _T_Hat: case _T_ident: {
			designator();
			if (la->kind == _T_Lpar) {
				Get();
				addTerminal(); 
				if (StartOf(8)) {
					ExpList();
				}
				Expect(_T_Rpar,__FUNCTION__);
				addTerminal(); 
			}
			break;
		}
		case _T_Lpar: {
			Get();
			addTerminal(); 
			expression();
			if (la->kind == _T_Qmark) {
				Get();
				addTerminal(); 
				expression();
				Expect(_T_Colon,__FUNCTION__);
				addTerminal(); 
				expression();
			}
			Expect(_T_Rpar,__FUNCTION__);
			addTerminal(); 
			break;
		}
		case _T_Bang: case _T_Plus: case _T_Minus: {
			if (la->kind == _T_Plus) {
				Get();
				addTerminal(); 
			} else if (la->kind == _T_Minus) {
				Get();
				addTerminal(); 
			} else {
				Get();
				addTerminal(); 
			}
			factor();
			break;
		}
		case _T_Lbrack: {
			list();
			break;
		}
		default: SynErr(82,__FUNCTION__); break;
		}
		d_stack.pop(); 
}

void Parser::MulOperator() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_MulOperator, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_Star) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_Slash) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_2Amp) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_Percent) {
			Get();
			addTerminal(); 
		} else SynErr(83,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::list() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_list, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_Lbrack,__FUNCTION__);
		addTerminal(); 
		if (StartOf(8)) {
			expression();
			while (peek(1) == _T_Comma && ( peek(2) == _T_Bang || peek(2) == _T_Dot || peek(2) == _T_false || peek(2) == _T_Hat || peek(2) == _T_ident || peek(2) == _T_integer || peek(2) == _T_Lbrack || peek(2) == _T_Lpar || peek(2) == _T_Minus || peek(2) == _T_path || peek(2) == _T_Plus || peek(2) == _T_real || peek(2) == _T_string || peek(2) == _T_symbol || peek(2) == _T_true ) ) {
				Expect(_T_Comma,__FUNCTION__);
				addTerminal(); 
				expression();
			}
			if (la->kind == _T_Comma) {
				Get();
				addTerminal(); 
			}
		}
		Expect(_T_Rbrack,__FUNCTION__);
		addTerminal(); 
		d_stack.pop(); 
}

void Parser::constructor() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_constructor, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_Lbrace) {
			Get();
			addTerminal(); 
			block();
			Expect(_T_Rbrace,__FUNCTION__);
			addTerminal(); 
		} else if (la->kind == _T_begin) {
			Get();
			addTerminal(); 
			block();
			Expect(_T_end,__FUNCTION__);
			addTerminal(); 
		} else SynErr(84,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::block() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_block, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		while (StartOf(9)) {
			if (StartOf(2)) {
				declaration();
			} else {
				statement();
			}
			if (la->kind == _T_Semi) {
				Get();
				addTerminal(); 
			}
		}
		d_stack.pop(); 
}

void Parser::condition() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_condition, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_if,__FUNCTION__);
		addTerminal(); 
		expression();
		if (la->kind == _T_Lbrace) {
			Get();
			addTerminal(); 
			block();
			Expect(_T_Rbrace,__FUNCTION__);
			addTerminal(); 
			if (la->kind == _T_else) {
				Get();
				addTerminal(); 
				if (la->kind == _T_if) {
					condition();
				} else if (la->kind == _T_Lbrace) {
					Get();
					addTerminal(); 
					block();
					Expect(_T_Rbrace,__FUNCTION__);
					addTerminal(); 
				} else SynErr(85,__FUNCTION__);
			}
		} else if (la->kind == _T_then) {
			Get();
			addTerminal(); 
			block();
			while (la->kind == _T_elsif) {
				Get();
				addTerminal(); 
				expression();
				Expect(_T_then,__FUNCTION__);
				addTerminal(); 
				block();
			}
			if (la->kind == _T_else) {
				Get();
				addTerminal(); 
				block();
			}
			Expect(_T_end,__FUNCTION__);
			addTerminal(); 
		} else SynErr(86,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::assigOrCall() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_assigOrCall, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		designator();
		if (StartOf(10)) {
			assignment();
		} else if (la->kind == _T_Lpar) {
			call();
		} else SynErr(87,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::assignment() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_assignment, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_Eq) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_ColonEq) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_PlusEq) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_MinusEq) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_StarEq) {
			Get();
			addTerminal(); 
		} else SynErr(88,__FUNCTION__);
		expression();
		d_stack.pop(); 
}

void Parser::call() {
		busy::SynTree* n = new busy::SynTree( busy::SynTree::R_call, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_Lpar,__FUNCTION__);
		addTerminal(); 
		ExpList();
		Expect(_T_Rpar,__FUNCTION__);
		addTerminal(); 
		d_stack.pop(); 
}




// If the user declared a method Init and a mehtod Destroy they should
// be called in the contructur and the destructor respctively.
//
// The following templates are used to recognize if the user declared
// the methods Init and Destroy.

template<typename T>
struct ParserInitExistsRecognizer {
	template<typename U, void (U::*)() = &U::Init>
	struct ExistsIfInitIsDefinedMarker{};

	struct InitIsMissingType {
		char dummy1;
	};
	
	struct InitExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static InitIsMissingType is_here(...);

	// exist only if ExistsIfInitIsDefinedMarker is defined
	template<typename U>
	static InitExistsType is_here(ExistsIfInitIsDefinedMarker<U>*);

	enum { InitExists = (sizeof(is_here<T>(NULL)) == sizeof(InitExistsType)) };
};

template<typename T>
struct ParserDestroyExistsRecognizer {
	template<typename U, void (U::*)() = &U::Destroy>
	struct ExistsIfDestroyIsDefinedMarker{};

	struct DestroyIsMissingType {
		char dummy1;
	};
	
	struct DestroyExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static DestroyIsMissingType is_here(...);

	// exist only if ExistsIfDestroyIsDefinedMarker is defined
	template<typename U>
	static DestroyExistsType is_here(ExistsIfDestroyIsDefinedMarker<U>*);

	enum { DestroyExists = (sizeof(is_here<T>(NULL)) == sizeof(DestroyExistsType)) };
};

// The folloing templates are used to call the Init and Destroy methods if they exist.

// Generic case of the ParserInitCaller, gets used if the Init method is missing
template<typename T, bool = ParserInitExistsRecognizer<T>::InitExists>
struct ParserInitCaller {
	static void CallInit(T *t) {
		// nothing to do
	}
};

// True case of the ParserInitCaller, gets used if the Init method exists
template<typename T>
struct ParserInitCaller<T, true> {
	static void CallInit(T *t) {
		t->Init();
	}
};

// Generic case of the ParserDestroyCaller, gets used if the Destroy method is missing
template<typename T, bool = ParserDestroyExistsRecognizer<T>::DestroyExists>
struct ParserDestroyCaller {
	static void CallDestroy(T *t) {
		// nothing to do
	}
};

// True case of the ParserDestroyCaller, gets used if the Destroy method exists
template<typename T>
struct ParserDestroyCaller<T, true> {
	static void CallDestroy(T *t) {
		t->Destroy();
	}
};

void Parser::Parse() {
	d_cur = Token();
	d_next = Token();
	Get();
	Busy();
	Expect(0,__FUNCTION__);
}

Parser::Parser(Lexer *scanner) {
	maxT = 71;

	ParserInitCaller<Parser>::CallInit(this);
	la = &d_dummy;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[11][73] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, T,x,x,x, x,T,x,x, x,T,T,T, T,T,x,x, T,T,x,T, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,T,T,x, x,x,x,x, T,T,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x},
		{x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, x,T,T,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,T,T,T, T,T,x,x, T,T,x,T, x,x,x,x, x,x,x,x, x},
		{x,x,T,x, x,x,x,x, x,x,T,x, x,x,x,T, x,T,T,x, T,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, T,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,T, x,x,x,T, T,T,T,T, T,x,x,x, x},
		{x,x,x,x, x,x,x,T, x,T,x,x, T,x,x,x, x,x,x,x, x,T,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,T,x, x,x,x,x, x,x,T,x, x,x,x,T, x,x,T,x, T,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, T,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,T, x,x,x,T, T,T,T,T, T,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,T,x,x, x,T,T,x, x,x,x,x, T,T,x,T, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,x, T,x,x,T, x,x,x,x, T,x,x,x, T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	ParserDestroyCaller<Parser>::CallDestroy(this);
}

void Parser::SynErr(const QString& sourcePath, int line, int col, int n, const char* ctx, const QString& str ) {
	QString s;
	QString ctxStr;
	if( ctx )
		ctxStr = QString( " in %1" ).arg(ctx);
    if( n == 0 )
        s = QString("EOF expected%1").arg(ctxStr);
    else if( n < TT_Specials )
        s = QString("'%2' expected%1").arg(ctxStr).arg(tokenTypeString(n));
    else if( n <= TT_Max )
        s = QString("%2 expected%1").arg(ctxStr).arg(tokenTypeString(n));
    else
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"T_Literals_ expected"); break;
			case 2: s = coco_string_create(L"T_Bang expected"); break;
			case 3: s = coco_string_create(L"T_BangEq expected"); break;
			case 4: s = coco_string_create(L"T_Hash expected"); break;
			case 5: s = coco_string_create(L"T_2Hash expected"); break;
			case 6: s = coco_string_create(L"T_Dlr expected"); break;
			case 7: s = coco_string_create(L"T_Percent expected"); break;
			case 8: s = coco_string_create(L"T_Amp expected"); break;
			case 9: s = coco_string_create(L"T_2Amp expected"); break;
			case 10: s = coco_string_create(L"T_Lpar expected"); break;
			case 11: s = coco_string_create(L"T_Rpar expected"); break;
			case 12: s = coco_string_create(L"T_Star expected"); break;
			case 13: s = coco_string_create(L"T_Rcmt expected"); break;
			case 14: s = coco_string_create(L"T_StarEq expected"); break;
			case 15: s = coco_string_create(L"T_Plus expected"); break;
			case 16: s = coco_string_create(L"T_PlusEq expected"); break;
			case 17: s = coco_string_create(L"T_Comma expected"); break;
			case 18: s = coco_string_create(L"T_Minus expected"); break;
			case 19: s = coco_string_create(L"T_MinusEq expected"); break;
			case 20: s = coco_string_create(L"T_Dot expected"); break;
			case 21: s = coco_string_create(L"T_Slash expected"); break;
			case 22: s = coco_string_create(L"T_Lcmt expected"); break;
			case 23: s = coco_string_create(L"T_Colon expected"); break;
			case 24: s = coco_string_create(L"T_ColonEq expected"); break;
			case 25: s = coco_string_create(L"T_Semi expected"); break;
			case 26: s = coco_string_create(L"T_Lt expected"); break;
			case 27: s = coco_string_create(L"T_Leq expected"); break;
			case 28: s = coco_string_create(L"T_Eq expected"); break;
			case 29: s = coco_string_create(L"T_2Eq expected"); break;
			case 30: s = coco_string_create(L"T_Gt expected"); break;
			case 31: s = coco_string_create(L"T_Geq expected"); break;
			case 32: s = coco_string_create(L"T_Qmark expected"); break;
			case 33: s = coco_string_create(L"T_Lbrack expected"); break;
			case 34: s = coco_string_create(L"T_LbrackRbrack expected"); break;
			case 35: s = coco_string_create(L"T_Rbrack expected"); break;
			case 36: s = coco_string_create(L"T_Hat expected"); break;
			case 37: s = coco_string_create(L"T_60 expected"); break;
			case 38: s = coco_string_create(L"T_Lbrace expected"); break;
			case 39: s = coco_string_create(L"T_2Bar expected"); break;
			case 40: s = coco_string_create(L"T_Rbrace expected"); break;
			case 41: s = coco_string_create(L"T_Keywords_ expected"); break;
			case 42: s = coco_string_create(L"T_begin expected"); break;
			case 43: s = coco_string_create(L"T_class expected"); break;
			case 44: s = coco_string_create(L"T_define expected"); break;
			case 45: s = coco_string_create(L"T_else expected"); break;
			case 46: s = coco_string_create(L"T_elsif expected"); break;
			case 47: s = coco_string_create(L"T_end expected"); break;
			case 48: s = coco_string_create(L"T_false expected"); break;
			case 49: s = coco_string_create(L"T_if expected"); break;
			case 50: s = coco_string_create(L"T_import expected"); break;
			case 51: s = coco_string_create(L"T_in expected"); break;
			case 52: s = coco_string_create(L"T_include expected"); break;
			case 53: s = coco_string_create(L"T_let expected"); break;
			case 54: s = coco_string_create(L"T_param expected"); break;
			case 55: s = coco_string_create(L"T_subdir expected"); break;
			case 56: s = coco_string_create(L"T_submod expected"); break;
			case 57: s = coco_string_create(L"T_submodule expected"); break;
			case 58: s = coco_string_create(L"T_then expected"); break;
			case 59: s = coco_string_create(L"T_true expected"); break;
			case 60: s = coco_string_create(L"T_type expected"); break;
			case 61: s = coco_string_create(L"T_var expected"); break;
			case 62: s = coco_string_create(L"T_Specials_ expected"); break;
			case 63: s = coco_string_create(L"T_ident expected"); break;
			case 64: s = coco_string_create(L"T_string expected"); break;
			case 65: s = coco_string_create(L"T_integer expected"); break;
			case 66: s = coco_string_create(L"T_real expected"); break;
			case 67: s = coco_string_create(L"T_path expected"); break;
			case 68: s = coco_string_create(L"T_symbol expected"); break;
			case 69: s = coco_string_create(L"T_Eof expected"); break;
			case 70: s = coco_string_create(L"T_MaxToken_ expected"); break;
			case 71: s = coco_string_create(L"??? expected"); break;
			case 72: s = coco_string_create(L"invalid Submodule"); break;
			case 73: s = coco_string_create(L"invalid Submodule"); break;
			case 74: s = coco_string_create(L"invalid declaration"); break;
			case 75: s = coco_string_create(L"invalid statement"); break;
			case 76: s = coco_string_create(L"invalid vardecl"); break;
			case 77: s = coco_string_create(L"invalid typedecl"); break;
			case 78: s = coco_string_create(L"invalid initializer"); break;
			case 79: s = coco_string_create(L"invalid classdecl"); break;
			case 80: s = coco_string_create(L"invalid relation"); break;
			case 81: s = coco_string_create(L"invalid AddOperator"); break;
			case 82: s = coco_string_create(L"invalid factor"); break;
			case 83: s = coco_string_create(L"invalid MulOperator"); break;
			case 84: s = coco_string_create(L"invalid constructor"); break;
			case 85: s = coco_string_create(L"invalid condition"); break;
			case 86: s = coco_string_create(L"invalid condition"); break;
			case 87: s = coco_string_create(L"invalid assigOrCall"); break;
			case 88: s = coco_string_create(L"invalid assignment"); break;

		default:
		{
			s = QString( "generic error %1").arg(n);
		}
		break;
	}
    if( !str.isEmpty() )
        s = QString("%1 %2").arg(s).arg(str);
	error(sourcePath, line, col, s);
	//count++;
}

} // namespace

