#ifndef __BUSY_SYNTREE__
#define __BUSY_SYNTREE__
// This file was automatically generated by EbnfStudio; don't modify it!

#include <busy/busyTokenType.h>
#include <busy/busyToken.h>
#include <QList>

namespace busy {

	struct SynTree {
		enum ParserRule {
			R_First = TT_Max + 1,
			R_AddOperator,
			R_Busy,
			R_ExpList,
			R_MulOperator,
			R_SimpleExpression,
			R_Submodule,
			R_assigOrCall,
			R_assignment,
			R_block,
			R_body,
			R_call,
			R_classdecl,
			R_condition,
			R_constructor,
			R_declaration,
			R_designator,
			R_enumdecl,
			R_expression,
			R_factor,
			R_fielddecl,
			R_identdef,
			R_initializer,
			R_list,
			R_macrodef,
			R_paramList,
			R_paramValue,
			R_relation,
			R_statement,
			R_term,
			R_tokens_,
			R_typedecl,
			R_typeref,
			R_vardecl,
			R_Last
		};
		SynTree(quint16 r = Tok_Invalid, const Token& = Token() );
		SynTree(const Token& t ):d_tok(t){}
		~SynTree() { foreach(SynTree* n, d_children) delete n; }

		static const char* rToStr( quint16 r );

		busy::Token d_tok;
		QList<SynTree*> d_children;
	};

}
#endif // __BUSY_SYNTREE__
